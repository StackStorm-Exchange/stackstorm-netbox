# This action was auto generated from the NetBox API Swagger Spec
# NetBox API version: 4.3
description: "Post a list of device objects."
enabled: true
entry_point: run.py
name: post.dcim.devices
parameters:
  endpoint_uri:
    default: "/dcim/devices/"
    immutable: true
    type: string
  http_verb:
    default: post
    immutable: true
    type: string
  get_detail_route_eligible:
    default: true
    immutable: true
    type: boolean
  fail_non_2xx:
    default: false
    type: boolean
    description: Set action as failed when http return reponse status isn't 2xx.
  name:
    required: false
    type: string
    description: "Name"
  device_type:
    required: false
    type: object
    description: "Device type"
  role:
    required: false
    type: object
    description: "Role"
  tenant:
    required: false
    type: object
    description: "Tenant"
  platform:
    required: false
    type: object
    description: "Platform"
  serial:
    required: false
    type: string
    description: "Serial number"
  asset_tag:
    required: false
    type: string
    description: "A unique tag used to identify this device"
  site:
    required: false
    type: object
    description: "Site"
  location:
    required: false
    type: object
    description: "Location"
  rack:
    required: false
    type: object
    description: "Rack"
  position:
    required: false
    type: integer
    description: "Position (U)"
  face:
    required: false
    type: string
    description: "Rack face"
  latitude:
    required: false
    type: integer
    description: "GPS coordinate in decimal format (xx.yyyyyy)"
  longitude:
    required: false
    type: integer
    description: "GPS coordinate in decimal format (xx.yyyyyy)"
  status:
    required: false
    type: string
    description: "* `offline` - Offline
* `active` - Active
* `planned` - Planned
* `staged` - Staged
* `failed` - Failed
* `inventory` - Inventory
* `decommissioning` - Decommissioning"
  airflow:
    required: false
    type: string
    description: "* `front-to-rear` - Front to rear
* `rear-to-front` - Rear to front
* `left-to-right` - Left to right
* `right-to-left` - Right to left
* `side-to-rear` - Side to rear
* `rear-to-side` - Rear to side
* `bottom-to-top` - Bottom to top
* `top-to-bottom` - Top to bottom
* `passive` - Passive
* `mixed` - Mixed"
  primary_ip4:
    required: false
    type: object
    description: "Primary ip4"
  primary_ip6:
    required: false
    type: object
    description: "Primary ip6"
  oob_ip:
    required: false
    type: object
    description: "Oob ip"
  cluster:
    required: false
    type: object
    description: "Cluster"
  virtual_chassis:
    required: false
    type: object
    description: "Virtual chassis"
  vc_position:
    required: false
    type: integer
    description: "Vc position"
  vc_priority:
    required: false
    type: integer
    description: "Virtual chassis master election priority"
  description:
    required: false
    type: string
    description: "Description"
  comments:
    required: false
    type: string
    description: "Comments"
  config_template:
    required: false
    type: object
    description: "Config template"
  local_context_data:
    required: false
    type: object
    description: "Local config context data takes precedence over source contexts in the final rendered config context"
  tags:
    required: false
    type: array
    description: "Array of tag strings"
  custom_fields:
    required: false
    type: object
    description: "Custom fields"
runner_type: python-script
